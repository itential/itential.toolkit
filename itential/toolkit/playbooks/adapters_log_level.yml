---
# Example usage: 
# ansible-playbook -i hosts adapters_log_level.yml -e 'log_level=error'
- name: Adapters log level
  hosts: platform
  gather_facts: false
  vars:
    ansible_connection: local

  tasks:

    - name: Validate log level input
      fail:
        msg: "Invalid log level selected. Please choose one of the valid log levels"
      when: log_level not in ['error', 'warn', 'info', 'debug', 'trace', 'spam']

    - name: Login to IAP and get token
      ansible.builtin.uri:
        url: "{{ iap_protocol }}://{{ ansible_host }}:{{ iap_port }}/login"
        method: POST
        body: '{"username": "{{ iap_username }}", "password": "{{ iap_password }}"}'
        body_format: json
        headers:
          Content-Type: "application/json"
        status_code: 200
        return_content: yes
      register: token

    - name: Extract token from login response
      set_fact:
        auth_token: "?token={{ token.content }}"

    - name: Get adapters list
      ansible.builtin.uri:
        url: "{{ iap_protocol }}://{{ ansible_host }}:{{ iap_port }}/adapters{{ auth_token }}"
        method: GET
        status_code: 200
        return_content: yes
      register: response

    - name: Extract adapters list from the response
      set_fact:
        adapters: "{{ response.json.results }}"
    
    - name: Create array of "name" values
      set_fact:
        adapter_list: "{{ adapters | map(attribute='data.name') | map('regex_replace', ' ', '%20') | list }}"

    - name: Display result
      debug:
        var: adapter_list

    - name: Set log level
      ansible.builtin.uri:
        url: "{{ iap_protocol }}://{{ ansible_host }}:{{ iap_port }}/adapters/{{ item }}/loglevel{{ auth_token }}"
        method: PUT
        status_code: 200
        return_content: yes
        body: {
          "properties": {
            "transport": "file",
            "level": "{{ log_level }}"
          }
        }
        body_format: json
      loop: "{{ adapter_list }}"
      loop_control:
        loop_var: item

