# Copyright (c) 2024, Itential, LLC
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
---
# Example usage:
# ansible-playbook -i hosts change_mongodb_password.yml"

- name: Change mongo password
  hosts: mongodb
  gather_facts: false
  tasks:
    - name: Determine database
      ansible.builtin.set_fact:
        database: "{% if user == 'admin'%}admin{% else %}{{ 'LocalAAA' if user == 'localaaa' else 'itential' }}{% endif %}"

    - name: Change mongo password
      community.mongodb.mongodb_shell:
        login_user: "{{ user }}"
        login_password: "{{ current_password }}"
        db: "{{ database }}"
        login_database: "{{ database }}"
        eval: "db.changeUserPassword('{{ user }}', '{{ new_password }}')"

- name: Update password in mongoProps in properties.json
  hosts: platform
  become: true
  gather_facts: false
  tasks:
    - name: Read properties.json
      ansible.builtin.command: "cat /opt/itential/current/properties.json"
      register: properties_raw
      when:  hostvars[groups['mongodb'][0]]['database'] == "itential"
    
    - name: Parse properties
      ansible.builtin.set_fact:
        properties: "{{ properties_raw.stdout | from_json }}"
      when: hostvars[groups['mongodb'][0]]['database'] == "itential"


    - name: Update the properties
      ansible.utils.update_fact:
        updates:
          - path: properties.mongoProps.credentials.passwd
            value: "{{ new_password }}"
      register: new_properties
      when:  hostvars[groups['mongodb'][0]]['database'] == "itential"
      
    - name: Overwrite the properties.json with new properties
      ansible.builtin.copy:
        content: "{{ new_properties.properties | to_json(indent=4)}}"
        dest: /opt/itential/current/properties.json
        remote_src: true
      when:  hostvars[groups['mongodb'][0]]['database'] == "itential"
    
    - name: Restart IAP
      ansible.builtin.systemd:
        name: automation-platform
        state: restarted
      when:  hostvars[groups['mongodb'][0]]['database'] == "itential"



- name: Update password in localaaa service config
  hosts: platform
  gather_facts: false
  pre_tasks:
    - name: iap_protocol
      ansible.builtin.pause:
        prompt: Please provide IAP Protocol (http or https)
      when: user == "localaaa"
    
    - name: iap_port
      ansible.builtin.pause:
        prompt: Please provide IAP Port
      when: user == "localaaa"
    
    - name: iap_username
      ansible.builtin.pause:
        prompt: Please provide IAP Username
      when: user == "localaaa"

    - name: iap_password
      ansible.builtin.pause:
        prompt: Please provide IAP Password
        echo: false
      when: user == "localaaa"

  tasks:
    - name: Login to IAP and get token
      ansible.builtin.uri:
        url: "{{ iap_protocol }}://localhost:{{ iap_port }}/login"
        method: POST
        body: '{"username": "{{ iap_username }}", "password": "{{ iap_password }}"}'
        body_format: json
        headers:
          Content-Type: "application/json"
        status_code: 200
        return_content: yes
      register: token
      when: user == "localaaa"

    - name: Extract token from login response
      ansible.builtin.set_fact:
        auth_token: "?token={{ token.content }}"
      when: user == "localaaa"
    
    - name: Get the service config of local_aaa adapter
      ansible.builtin.uri:
        url: "{{ iap_protocol }}://localhost:{{ iap_port }}/adapters/local_aaa{{ auth_token }}"
        method: GET
        status_code: 200
        return_content: yes
      register: service_config_response
      when: user == "localaaa"
    
    - name: Extract the properties
      ansible.builtin.set_fact:
        adapter_properties: "{{ service_config_response.json.data }}"
      when: user == "localaaa"
    
    - name: Update the properties
      ansible.utils.update_fact:
        updates:
          - path: adapter_properties.properties.properties.database.credentials.passwd
            value: "{{ new_password }}"
      register: new_properties
      when: user == "localaaa"
    
    - name: Push new properties into IAP
      ansible.builtin.uri:
        url: "{{ iap_protocol }}://localhost:{{ iap_port }}/adapters/local_aaa{{ auth_token }}"
        method: PUT
        body: '{"properties": {{ new_properties.adapter_properties }}}'
        body_format: json
        headers:
          Content-Type: "application/json"
        status_code: 200
        return_content: yes
      register: token
      when: user == "localaaa"

    - name: Restart local_aaa adapter
      ansible.builtin.uri:
        url: "{{ iap_protocol }}://localhost:{{ iap_port }}/adapters/local_aaa{{ auth_token }}"
        method: PUT
        status_code: 200
        return_content: yes
      when: user == "localaaa"