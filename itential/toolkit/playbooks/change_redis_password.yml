# Copyright (c) 2024, Itential, LLC
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
---
# Example usage:
# ansible-playbook -i hosts change_redis_password.yml"

- name: Change redis password
  hosts: redis
  gather_facts: false
  become: true
  tasks:
    - name: Change the redis password in redis conf file
      ansible.builtin.lineinfile:
        path: /etc/redis/redis.conf
        regexp: ^(\s*user {{ user }}\s.*>).*$
        line: \1{{ new_password }}
        backrefs: true
    
    - name: Change the password in sentinel file
      ansible.builtin.lineinfile:
        path: /etc/redis/sentinel.conf
        regexp: ^(\s*user {{ user }}.*>)\w+(\s.*)$
        line: '\1{{ new_password }}\2'
        backrefs: true

- name: Update password references in IAP
  hosts: platform
  gather_facts: false
  connection: local
  tasks:
    - name: Login to IAP and get token
      ansible.builtin.uri:
        url: "{{ iap_protocol }}://{{ ansible_host }}:{{ iap_port }}/login"
        method: POST
        body: '{"username": "{{ iap_username }}", "password": "{{ iap_password }}"}'
        body_format: json
        headers:
          Content-Type: "application/json"
        status_code: 200
        return_content: yes
      register: token
      when: user == "itential" or user == "sentineluser"
    
    - name: Extract token from login response
      set_fact:
        auth_token: "?token={{ token.content }}"
      when: user == "itential" or user == "sentineluser"
    
    - name: Get list of all profiles
      ansible.builtin.uri:
          url: "{{ iap_protocol }}://{{ ansible_host }}:{{ iap_port }}/profiles{{ auth_token }}"
          method: GET
          status_code: 200
          return_content: yes
      register: profiles_response
      when: user == "itential" or user == "sentineluser"
    
    - name: Extract profile id and redisProps of all profiles
      ansible.builtin.set_fact:
        profiles: |-
                {% set profiles = [] %}
                {% for current_profile in profiles_response.json.results %}
                {% set new_profile = dict() %}
                {% set x = new_profile.__setitem__('id', current_profile.profile.id) %}
                {% set x = new_profile.__setitem__('redisProps', current_profile.profile.redisProps) %}
                {% set x = profiles.append(new_profile) %}
                {% endfor %}
                {{ profiles }}
      when: user == "itential" or user == "sentineluser"

    - name: Change redisProps.password
      ansible.builtin.set_fact: 
        updated_profiles: |-
                  {% for profile in profiles %}
                  {% set redisProps = profile.redisProps %}
                  {% set x = redisProps.update({'password': new_password}) %}
                  {% set x = profile.update({'redisProps': redisProps})%}
                  {% endfor %}
                  {{ profiles }}
      when: user == "itential"
    
    - name: Change redisProps.sentinelPassword
      ansible.builtin.set_fact: 
        updated_profiles: |-
                  {% for profile in profiles %}
                  {% set redisProps = profile.redisProps %}
                  {% set x = redisProps.update({'sentinelPassword': new_password}) %}
                  {% set x = profile.update({'redisProps': redisProps})%}
                  {% endfor %}
                  {{ profiles }}
      when: user == "sentineluser"

    - name: Update redis password for itential user in all profiles
      ansible.builtin.uri:
        url: "{{ iap_protocol }}://{{ ansible_host }}:{{ iap_port }}/profiles/{{ item.id }}{{ auth_token }}"
        method: PUT
        body: '{"properties": {"redisProps": {{ item.redisProps }} }}'
        body_format: json
        headers:
          Content-Type: "application/json"
        status_code: 200
        return_content: yes
      register: update_response
      loop: "{{ updated_profiles }}"
      when: user == "itential" or user == "sentineluser"