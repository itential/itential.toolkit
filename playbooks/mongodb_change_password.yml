# Copyright (c) 2024, Itential, LLC
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
---
# This playbook updates the MongoDB `itential` user's password,
# updates the Platform properties file with the new password,
# and restarts IAP to apply the change.

# This task updates only the `mongo_password` parameter in the platform configuration.
# The `mongo_url` field is not modified.
# If a password is present in both `mongo_url` and `mongo_password`, the value in `mongo_password`
# takes precedence and will be used by the platform.

# To hide sensitive data, use ansible-vault to encrypt passwords.

# Example usage:
# ansible-playbook update_mongo_password.yml -i hosts \
#   -e "mongo_admin_password=adminpass mongo_itential_new_password=newpass"

- name: Update MongoDB password and restart platform
  hosts: platform,mongodb,platform_secondary
  gather_facts: false
  any_errors_fatal: true

  tasks:
    - name: Deactivate Platform workers
      when: "'platform' in group_names or 'platform_secondary' in group_names"
      ansible.builtin.include_role:
        name: restart_platform
        tasks_from: shutdown_workers
      tags: deactivate_workers

    - name: Check if this host is primary (via hello command)
      when: "'mongodb' in group_names"
      block:
        - name: Run hello command to detect primary
          community.mongodb.mongodb_shell:
            eval: "db.adminCommand('hello').isWritablePrimary"
          register: hello_result
          vars:
            ansible_python_interpreter: /usr/bin/python3

        - name: Set is_primary_mongo fact
          ansible.builtin.set_fact:
            is_primary_mongo: "{{ hello_result.transformed_output[0] | default(false) }}"

    - name: Update password on MongoDB primary
      when:
        - "'mongodb' in group_names"
        - is_primary_mongo | bool
      block:
        - name: Confirm 'itential' MongoDB user exists
          community.mongodb.mongodb_shell:
            login_user: admin
            login_password: "{{ mongo_admin_password }}"
            login_database: admin
            db: itential
            eval: "db.getUser('itential')"
          register: user_check
          failed_when:
            - user_check.failed
            - user_check.transformed_output is defined
            - user_check.transformed_output is string
            - user_check.transformed_output == 'null'
          vars:
            ansible_python_interpreter: /usr/bin/python3

        - name: Change 'itential' MongoDB user password
          community.mongodb.mongodb_shell:
            login_user: admin
            login_password: "{{ mongo_admin_password }}"
            login_database: admin
            db: itential
            eval: "db.changeUserPassword('itential', '{{ mongo_itential_new_password }}')"
          vars:
            ansible_python_interpreter: /usr/bin/python3

    - name: Update and restart platform
      when: "'platform' in group_names or 'platform_secondary' in group_names"
      block:
        - name: Update platform.properties with new password
          ansible.builtin.replace:
            path: /etc/itential/platform.properties
            regexp: '^mongo_password\s*=.*$'
            replace: "mongo_password = {{ mongo_itential_new_password }}"

        - name: Restart Platform
          ansible.builtin.include_role:
            name: restart_platform
            tasks_from: restart
